" .ideavimrc - Configuration for IdeaVim plugin in JetBrains IDEs
" Inspired by LazyVim/Neovim keymap organization

" -----------------------------------------------------------------------------
" Options
" -----------------------------------------------------------------------------
set number                     " Show line numbers
set relativenumber             " Show relative line numbers
set cursorline                 " Highlight the current line
set scrolloff=8                " Keep 8 lines visible above/below cursor when scrolling
set showcmd                    " Show command in the last line of the screen
set incsearch                  " Highlight search results incrementally
set hlsearch                   " Highlight all search results
set ignorecase                 " Case-insensitive search
set smartcase                  " Override ignorecase if search pattern contains uppercase letters
set clipboard=unnamed          " Use system clipboard for copy/paste
set notimeout		       " no timeout for which-key

" -----------------------------------------------------------------------------
" Leader Key
" -----------------------------------------------------------------------------
let mapleader=" "
nnoremap <SPACE> <Nop>

" -----------------------------------------------------------------------------
" Plugins (Managed via IdeaVim's :Plug command or JetBrains Marketplace)
" -----------------------------------------------------------------------------
" Ensure these Vim plugins are available to IdeaVim (e.g., via ~/.vim/plugged or IDE settings)
" Or install the corresponding JetBrains plugins if available (like EasyMotion, Which-Key)

" Note: Actual installation often happens via IDE Plugin Marketplace for some features
" Plug 'easymotion/vim-easymotion'        " Already enabled via `set easymotion` if JB plugin installed
Plug 'tpope/vim-surround'               " cs, ds, ys - change/delete/add surroundings
Plug 'tpope/vim-commentary'             " gc - comment/uncomment lines

" --- Configure Plugins ---
" easymotion
" Enable EasyMotion plugin integration (Requires JetBrains EasyMotion plugin)
set easymotion
" use (leader, leader) and then any command that takes motion as an argument


" nerdtree
Plug 'preservim/nerdtree'               " File explorer (:NERDTreeToggle)
map <leader>e :NERDTreeToggle<CR>
" o: open files and directories
" t open in new tab
" i open in split


Plug 'machakann/vim-highlightedyank'    " Highlight yanked text briefly
let g:highlightedyank_highlight_duration = 200

" -----------------------------------------------------------------------------
" General Mappings
" -----------------------------------------------------------------------------
" Escape insert mode easily
inoremap jj <Esc>


map == <Action>(ReformatCode)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

map U <Action>(Undo)
map <C-r> <Action>(Redo)

" Navigate back/forward in IDE navigation history
map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)

" Search and replace currently selected text
vnoremap <leader>s y:%s/<C-r>"/<C-r>"/g<Left><Left>

" -----------------------------------------------------------------------------
" Leader Mappings
" -----------------------------------------------------------------------------

" --- File / Explorer ---
map <leader>ff <Action>(GotoFile)
map <leader>fs <Action>(SaveAll)
" Grep (Root Dir)
nmap <leader>/ <Action>(FindInPath)

" --- Search ---
map <leader>sa <Action>(FindInPath)
map <leader>sp <Action>(FindInPath)
map <leader>sw <Action>(FindUsages)

map <leader>wv <Action>(SplitVertically)
map <leader>ws <Action>(SplitHorizontally)
map <leader>wc <Action>(CloseEditor)
map <leader>wo <Action>(Unsplit)
map <leader>w] <Action>(MoveEditorToNextTabGroup)
map <leader>w[ <Action>(MoveEditorToPreviousTabGroup)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)
" --- Project ---
map <leader>wq <Action>(NextProjectWindow)

" Navigate between Vim splits using Ctrl + hjkl (like tmux)
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Resize splits using Ctrl+Alt+hjkl
map <C-A-h> <Action>(StretchSplitToLeft)
map <C-A-l> <Action>(StretchSplitToRight)
map <C-A-k> <Action>(StretchSplitToTop)
map <C-A-j> <Action>(StretchSplitToBottom)

" --- Tab / Buffer Management ---
map <leader>bd <Action>(CloseContent)
map <leader>bn <Action>(NextTab)
map <leader>bp <Action>(PreviousTab)
map <leader>b] <Action>(NextTab)
map <leader>b[ <Action>(PreviousTab)
map <leader>bl <Action>(Switcher)

" Tab Navigation
nmap <S-h> <Action>(PreviousTab)
nmap <S-l> <Action>(NextTab)

" --- Code Actions ---
map <leader>ca <Action>(ShowIntentionActions)
map <leader>cf <Action>(ReformatCode)
map <leader>cr <Action>(RenameElement)
map <leader>ce <Action>(ExtractMethod)
map <leader>cd <Action>(GotoDeclaration)
map <leader>cD <Action>(GotoTypeDeclaration)
map <leader>ci <Action>(GotoImplementation)
map <leader>cu <Action>(FindUsages)
map K <Action>(QuickJavaDoc)

" Method Navigation
map [ <Action>(MethodUp)
map ] <Action>(MethodDown)

" Quickfix List
nmap <leader>xq <Action>(ActivateProblemsViewToolWindow)

" --- Git ---
" Git actions popup
map <leader>gg <Action>(Vcs.QuickListPopupAction)
map <leader>gs <Action>(Vcs.ShowChanges)
map <leader>gc <Action>(CheckinProject)
map <leader>gp <Action>(Vcs.UpdateProject)
map <leader>gP <Action>(Vcs.Push)

" --- Run / Debug ---
" Run
map <leader>rr <Action>(Run)
map <leader>rd <Action>(Debug)
map <leader>rb <Action>(ToggleLineBreakpoint)
map <leader>rC <Action>(Resume)
map <leader>ro <Action>(StepOver)
map <leader>ri <Action>(StepInto)
map <leader>rO <Action>(StepOut)

" --- Terminal ---
" Terminal Toggle - Kept your original <leader>t
map <leader>tt <Action>(ActivateTerminalToolWindow)
" Consider mapping terminal escape sequence if needed, e.g., tnoremap <Esc> <C-\><C-n>


" --- View / Display Options ---
map <leader>vd <Action>(ToggleDistractionFreeMode)
map <leader>vz <Action>(ToggleZenMode)
map <leader>vf <Action>(ToggleFullScreen)

" --- Other IDE Actions ---
" Add more <Action>(...) mappings as needed, organizing them under appropriate leader keys.
" Find Action IDs: https://jb.gg/ideavim-action-ids or use `:actionlist` in IdeaVim

" -----------------------------------------------------------------------------
" Plugin Specific Mappings (Example: NERDTree)
" -----------------------------------------------------------------------------
" You can add NERDTree specific mappings here if desired
" Example: Map 'o' in NERDTree window to open file and close NERDTree
" autocmd FileType nerdtree nmap <buffer> o :NERDTreeToggle<CR>
" autocmd FileType nerdtree nmap <buffer> <CR> :NERDTreeToggle<CR>

" -----------------------------------------------------------------------------
" Final Sanity Checks / Overrides
" -----------------------------------------------------------------------------
" Ensure commentary plugin works via standard 'gc' mapping (usually automatic)
" Ensure surround plugin works via standard 'cs', 'ds', 'ys' (usually automatic)

" --- End of .ideavimrc ---
